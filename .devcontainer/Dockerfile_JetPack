# Image Variables
ARG L4T_MAJOR="35"
ARG L4T_MINOR="3"
ARG L4T_PATCH="1"
ARG L4T_BASE="l4t-jetpack"

# Base Image
FROM nvcr.io/nvidia/${L4T_BASE}:r${L4T_MAJOR}.${L4T_MINOR}.${L4T_PATCH}

# Install Variables
ARG L4T_MAJOR="35"
ARG L4T_MINOR="3"
ARG L4T_PATCH="1"
ARG L4T_BASE="l4t-jetpack"
ARG ZED_MAJOR="4"
ARG ZED_MINOR="0"
ARG CMAKE_VERSION="3.24.3"
ARG OPENCV_VERSION="4.8.0"
ARG GEOLIB_VERSION="v2.3"
ARG QUILL_VERSION="v3.3.1"
ARG GTEST_VERSION="v1.14.0"
ARG TZ="America/Chicago"

# Set Labels
LABEL authors="Missouri S&T Mars Rover Design Team"
LABEL maintainer="Mars Rover Design Team <marsrover@mst.edu>"
LABEL org.opencontainers.image.source=https://github.com/missourimrdt/autonomy_software
LABEL org.opencontainers.image.licenses=GPL-3.0-only
LABEL org.opencontainers.image.version="v24.1.0"
LABEL org.opencontainers.image.description="Docker Image for ${L4T_BASE} ${L4T_MAJOR}.${L4T_MINOR}.${L4T_PATCH} with CUDA ${CUDA_MAJOR}.${CUDA_MINOR}, ZED SDK ${ZED_MAJOR}.${ZED_MINOR}, OpenCV ${OPENCV_VERSION}, Quill ${QUILL_VERSION}, and Google Test ${GTEST_VERSION}."

# Set Non-Interactive Mode
ARG DEBIAN_FRONTEND=noninteractive

# Set Jetson Streaming Evironment Variables
ENV LOGNAME root

# Set L4T Version
RUN echo "# R${L4T_MAJOR} (release), REVISION: ${L4T_MINOR}.${L4T_PATCH}" > /etc/nv_tegra_release

# Install Required Ubuntu Packages
RUN apt-get update && apt-get install --no-install-recommends -y \
    build-essential gfortran cmake git gdb file tar libatlas-base-dev apt-transport-https iputils-ping \
    libavcodec-dev libavformat-dev libavresample-dev libcanberra-gtk3-module zstd wget less \
    libdc1394-22-dev libeigen3-dev libglew-dev libgstreamer-plugins-base1.0-dev udev curl net-tools \
    libgstreamer-plugins-good1.0-dev libgstreamer1.0-dev libgtk-3-dev libjpeg-dev sudo usbutils \
    libjpeg8-dev libjpeg-turbo8-dev liblapack-dev liblapacke-dev libopenblas-dev libpng-dev tzdata \
    libpostproc-dev libswscale-dev libtbb-dev libtbb2 libtesseract-dev libtiff-dev libv4l-dev \
    libxine2-dev libxvidcore-dev libx264-dev libgtkglext1 libgtkglext1-dev pkg-config qv4l2 \
    v4l-utils zlib1g-dev python3-dev python-numpy libboost-all-dev valgrind doxygen graphviz nano

# This symbolic link is needed to use the streaming features on Jetson inside a container
RUN ln -sf /usr/lib/aarch64-linux-gnu/tegra/libv4l2.so.0 /usr/lib/aarch64-linux-gnu/libv4l2.so

# Set Timezone
RUN echo "${TZ}" > /etc/localtime && \
    echo "${TZ}" > /etc/timezone

# Install gcc/g++
RUN apt-get install  --no-install-recommends -y \
    gcc-10 g++-10 && \
    rm -rf /var/lib/apt/lists/* && \
    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 --slave /usr/bin/g++ g++ /usr/bin/g++-10 --slave /usr/bin/gcov gcov /usr/bin/gcov-10

# Install CMake
COPY install-cmake.sh /tmp/
RUN if [ "${CMAKE_VERSION}" != "none" ]; then \
    chmod +x /tmp/install-cmake.sh && /tmp/install-cmake.sh ${CMAKE_VERSION}; \
    fi && \
    rm -f /tmp/install-cmake.sh

# Set Working Directory
WORKDIR /opt

# Install ZED SDK
RUN wget -q --no-check-certificate -O ZED_SDK_Linux.run \
    https://download.stereolabs.com/zedsdk/${ZED_MAJOR}.${ZED_MINOR}/l4t${L4T_MAJOR}.${L4T_MINOR}/jetsons && \
    chmod +x ZED_SDK_Linux.run ; ./ZED_SDK_Linux.run silent skip_drivers && \
    rm -rf /usr/local/zed/resources/* \
    rm -rf ZED_SDK_Linux.run && \
    rm -rf /var/lib/apt/lists/* && \
    mkdir -p /root/Documents/ZED/ && \
    sed '/#pragma message.*/d' /usr/local/zed/include/sl/Fusion.hpp

# Install OpenCV
RUN git clone --depth 1 --branch ${OPENCV_VERSION} https://github.com/opencv/opencv.git && \
    git clone --depth 1 --branch ${OPENCV_VERSION} https://github.com/opencv/opencv_contrib.git && \
    mkdir opencv/build && cd opencv/build && \
    cmake \
    -D CMAKE_BUILD_TYPE=RELEASE \
    -D CMAKE_INSTALL_PREFIX=/usr/local \
    -D INSTALL_PYTHON_EXAMPLES=OFF \
    -D INSTALL_C_EXAMPLES=OFF \
    -D BUILD_SHARED_LIBS=OFF \
    -D BUILD_EXAMPLES=OFF \
    -D BUILD_PERF_TESTS=OFF \
    -D BUILD_TESTS=OFF \
    -D WITH_CUDA=ON \
    -D WITH_CUDNN=ON \
    -D OPENCV_DNN_CUDA=ON \
    -D WITH_VTK=OFF \
    -D WITH_TBB=ON \
    -D ENABLE_FAST_MATH=1 \
    -D CUDA_FAST_MATH=1 \
    ### Build for Jetson Orin GPU
    -D CUDA_ARCH_PTX="" \
    -D CUDA_ARCH_BIN="8.7" \
    ###
    -D WITH_CUBLAS=1 \
    -D WITH_FFMPEG=ON \
    -D OPENCV_EXTRA_MODULES_PATH=/opt/opencv_contrib/modules/aruco \
    -D OPENCV_EXTRA_MODULES_PATH=/opt/opencv_contrib/modules/cudev \
    -D HAVE_opencv_python3=ON .. && \
    cat /proc/cpuinfo | grep "processor" | wc -l | xargs make -j && \
    make install && ldconfig && \
    cd ../.. && \
    rm -rf opencv_contrib && rm -rf opencv

# Install GeographicLib from Source
RUN git clone --depth 1 --branch ${GEOLIB_VERSION} https://github.com/geographiclib/geographiclib.git && \
    mkdir geographiclib/build && \
    cd geographiclib/build && \
    cmake \
    -D CMAKE_BUILD_TYPE=RelWithDebInfo .. && \
    make && \
    make install && \
    cd ../.. && \
    rm -rf geographiclib

# Install Quill from Source
RUN git clone --depth 1 --branch ${QUILL_VERSION} http://github.com/odygrd/quill.git && \
    mkdir quill/build && \
    cd quill/build && \
    cmake .. && \
    make && \
    make install && \
    cd ../.. && \
    rm -rf quill

# Install Google Test from Source
RUN git clone --depth 1 --branch ${GTEST_VERSION} https://github.com/google/googletest.git && \
    mkdir googletest/build && \
    cd googletest/build && \
    cmake .. && \
    make && \
    make install && \
    cd ../.. && \
    rm -rf googletest

# Enable Make Threads
RUN echo 'export MAKEFLAGS=-j$(($(grep -c "^processor" /proc/cpuinfo) - 1))' >> .bashrc

# Clone Autonomy Software Repository
RUN git clone --recurse-submodules -j8 https://github.com/MissouriMRDT/Autonomy_Software.git /opt/Autonomy_Software

# Set Working Directory
WORKDIR /opt/Autonomy_Software/
