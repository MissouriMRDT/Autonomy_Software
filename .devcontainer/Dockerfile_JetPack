# Base Image
FROM stereolabs/zed:4.0-tools-devel-jetson-jp5.1.1
LABEL authors="Missouri S&T Mars Rover Design Team"
LABEL maintainer="Mars Rover Design Team <marsrover@mst.edu>"
LABEL org.opencontainers.image.source=https://github.com/missourimrdt/autonomy_software
LABEL org.opencontainers.image.licenses=GPL-3.0-only
LABEL org.opencontainers.image.description="v24.0.0"
ARG DEBIAN_FRONTEND=noninteractive

# Install Necessary Packages
RUN apt-get update && apt-get install --no-install-recommends -y \
    build-essential gfortran cmake git gdb file tar libatlas-base-dev \
    libavcodec-dev libavformat-dev libavresample-dev libcanberra-gtk3-module \
    libdc1394-22-dev libeigen3-dev libglew-dev libgstreamer-plugins-base1.0-dev \
    libgstreamer-plugins-good1.0-dev libgstreamer1.0-dev libgtk-3-dev libjpeg-dev \
    libjpeg8-dev libjpeg-turbo8-dev liblapack-dev liblapacke-dev libopenblas-dev libpng-dev \
    libpostproc-dev libswscale-dev libtbb-dev libtbb2 libtesseract-dev libtiff-dev libv4l-dev \
    libxine2-dev libxvidcore-dev libx264-dev libgtkglext1 libgtkglext1-dev pkg-config qv4l2 \
    v4l-utils zlib1g-dev python3-dev python-numpy libboost-all-dev valgrind doxygen graphviz 

# Install gcc/g++
RUN apt-get install  --no-install-recommends -y \
    gcc-10 g++-10 && \
    rm -rf /var/lib/apt/lists/*
# Update gcc and g++ to alternatively point to gcc/g++ 10 install.
RUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 --slave /usr/bin/g++ g++ /usr/bin/g++-10 --slave /usr/bin/gcov gcov /usr/bin/gcov-10

# Install CMake
ARG INSTALL_CMAKE_VERSION_FROM_SOURCE="3.24.3"
COPY install-cmake.sh /tmp/

RUN if [ "${INSTALL_CMAKE_VERSION_FROM_SOURCE}" != "none" ]; then \
    chmod +x /tmp/install-cmake.sh && /tmp/install-cmake.sh ${INSTALL_CMAKE_VERSION_FROM_SOURCE}; \
    fi && \
    rm -f /tmp/install-cmake.sh

# Set Working Directory
WORKDIR /opt

# Install OpenCV from Source
ARG OPENCV_VERSION="4.8.0"
RUN git clone --depth 1 --branch ${OPENCV_VERSION} https://github.com/opencv/opencv.git && \
    git clone --depth 1 --branch ${OPENCV_VERSION} https://github.com/opencv/opencv_contrib.git && \
    mkdir opencv/build && cd opencv/build && \
    cmake \
    -D CMAKE_BUILD_TYPE=RELEASE \
    -D CMAKE_INSTALL_PREFIX=/usr/local \
    -D INSTALL_PYTHON_EXAMPLES=OFF \
    -D INSTALL_C_EXAMPLES=OFF \
    -D BUILD_SHARED_LIBS=OFF \
    -D BUILD_EXAMPLES=OFF \
    -D BUILD_PERF_TESTS=OFF \
    -D BUILD_TESTS=OFF \
    -D WITH_CUDA=ON \
    -D WITH_CUDNN=ON \
    -D OPENCV_DNN_CUDA=ON \
    -D WITH_VTK=OFF \
    -D WITH_TBB=ON \
    -D ENABLE_FAST_MATH=1 \
    -D CUDA_FAST_MATH=1 \
    ### Build for Jetson Orin GPU
    -D CUDA_ARCH_PTX="" \
    -D CUDA_ARCH_BIN="8.7" \
    ###
    -D WITH_CUBLAS=1 \
    -D WITH_FFMPEG=ON \
    -D OPENCV_EXTRA_MODULES_PATH=/opt/opencv_contrib/modules/aruco \
    -D OPENCV_EXTRA_MODULES_PATH=/opt/opencv_contrib/modules/cudev \
    -D HAVE_opencv_python3=ON .. && \
    cat /proc/cpuinfo | grep "processor" | wc -l | xargs make -j && \
    make install && ldconfig && \
    cd ../.. && \
    rm -rf opencv_contrib && rm -rf opencv

# Install Quill from Source
ARG QUILL_VERSION="v3.2.0"
RUN git clone --depth 1 --branch ${QUILL_VERSION} http://github.com/odygrd/quill.git && \
    mkdir quill/build && \
    cd quill/build && \
    cmake .. && \
    make && \
    make install && \
    cd ../.. && \
    rm -rf quill

# Install Google Test from Source
ARG GOOGLE_TEST_VERSION="v1.13.0"
RUN git clone --depth 1 --branch ${GOOGLE_TEST_VERSION} https://github.com/google/googletest.git && \
    mkdir googletest/build && \
    cd googletest/build && \
    cmake .. && \
    make && \
    make install && \
    cd ../.. && \
    rm -rf googletest

# Set Linux Environment Variable for Make Threads. Runs everytime a terminal is opened.
RUN echo 'export MAKEFLAGS=-j$(($(grep -c "^processor" /proc/cpuinfo) - 1))' >> .bashrc

# Clone your C++ project repository
RUN git clone --recurse-submodules -j8 https://github.com/MissouriMRDT/Autonomy_Software.git

# Set the working directory TO BUILD
WORKDIR /Autonomy_Software/
