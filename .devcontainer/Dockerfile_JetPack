# Image Variables
ARG L4T_MAJOR="36"
ARG L4T_MINOR="2"
ARG L4T_PATCH="0"
ARG L4T_BASE="l4t-jetpack"

# Base Image
FROM nvcr.io/nvidia/${L4T_BASE}:r${L4T_MAJOR}.${L4T_MINOR}.${L4T_PATCH}

# Install Variables
ARG L4T_MAJOR="36"
ARG L4T_MINOR="2"
ARG L4T_PATCH="0"
ARG L4T_BASE="l4t-jetpack"
 
# Set Non-Interactive Mode
ARG DEBIAN_FRONTEND=noninteractive

# Set Jetson Streaming Evironment Variables
ENV LOGNAME root

# Set L4T Version
RUN echo "# R${L4T_MAJOR} (release), REVISION: ${L4T_MINOR}.${L4T_PATCH}" > /etc/nv_tegra_release

# Add APT Repo for PCIe drivers and Bazel.
RUN apt update && apt install -y curl && \
    echo "deb https://packages.cloud.google.com/apt coral-edgetpu-stable main" | tee /etc/apt/sources.list.d/coral-edgetpu.list && \
    curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -

# Install Required Ubuntu Packages
RUN apt-get update && apt-get install --no-install-recommends -y \
    build-essential gfortran cmake git gdb file tar libatlas-base-dev apt-transport-https iputils-ping \
    libavcodec-dev libavformat-dev libswresample-dev libcanberra-gtk3-module zstd wget less \
    libeigen3-dev libglew-dev libgstreamer-plugins-base1.0-dev udev net-tools \
    libgstreamer-plugins-good1.0-dev libgstreamer1.0-dev libgtk-3-dev libjpeg-dev sudo usbutils \
    libjpeg8-dev libjpeg-turbo8-dev liblapack-dev liblapacke-dev libopenblas-dev libpng-dev tzdata \
    libpostproc-dev libswscale-dev libtbb-dev libtbb2 libtesseract-dev libtiff-dev libv4l-dev \
    libxine2-dev libxvidcore-dev libx264-dev libgtkglext1 libgtkglext1-dev pkg-config qv4l2 \
    v4l-utils zlib1g-dev python3-dev libboost-all-dev valgrind doxygen graphviz nano \
    vim-common libedgetpu1-std gasket-dkms ca-certificates

# This symbolic link is needed to use the streaming features on Jetson inside a container
RUN ln -sf /usr/lib/aarch64-linux-gnu/tegra/libv4l2.so.0 /usr/lib/aarch64-linux-gnu/libv4l2.so

# Set Timezone
ARG TZ="America/Chicago"
RUN echo "${TZ}" > /etc/localtime && \
    echo "${TZ}" > /etc/timezone

# Install gcc/g++
RUN apt-get install  --no-install-recommends -y \
    gcc-10 g++-10 && \
    rm -rf /var/lib/apt/lists/* && \
    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 --slave /usr/bin/g++ g++ /usr/bin/g++-10 --slave /usr/bin/gcov gcov /usr/bin/gcov-10

# Install CMake
ARG CMAKE_VERSION="3.27.9"
COPY install-cmake.sh /tmp/
RUN if [ "${CMAKE_VERSION}" != "none" ]; then \
    chmod +x /tmp/install-cmake.sh && /tmp/install-cmake.sh ${CMAKE_VERSION}; \
    fi && \
    rm -f /tmp/install-cmake.sh

# Set Working Directory
WORKDIR /opt

# Install ZED SDK
ARG ZED_MAJOR="4"
ARG ZED_MINOR="1"
RUN wget -q --no-check-certificate -O ZED_SDK_Linux.run \
    https://download.stereolabs.com/zedsdk/${ZED_MAJOR}.${ZED_MINOR}/l4t${L4T_MAJOR}.${L4T_MINOR}/jetsons && \
    chmod +x ZED_SDK_Linux.run ; ./ZED_SDK_Linux.run silent && \
    rm -rf /usr/local/zed/resources/* \
    rm -rf ZED_SDK_Linux.run && \
    rm -rf /var/lib/apt/lists/* && \
    mkdir -p /root/Documents/ZED/ && \
    sed -i '/#pragma message*/d' /usr/local/zed/include/sl/Fusion.hpp

# Install OpenCV
ARG OPENCV_VERSION="4.9.0"
RUN wget -q https://github.com/MissouriMRDT/Autonomy_Packages/raw/main/opencv/arm64/opencv_${OPENCV_VERSION}_arm64.deb && \
    dpkg -i opencv_${OPENCV_VERSION}_arm64.deb && \
    rm opencv_${OPENCV_VERSION}_arm64.deb

# Install PyTorch.
ARG TORCH_VERSION="2.2.2"
RUN wget -q https://github.com/MissouriMRDT/Autonomy_Packages/raw/main/pytorch/arm64/pytorch_${TORCH_VERSION}_arm64.deb && \
    dpkg -i pytorch_${TORCH_VERSION}_arm64.deb && \
    rm pytorch_${TORCH_VERSION}_arm64.deb

# Install Abseil.
ARG ABSEIL_VERSION="20230802.1"
RUN wget -q https://github.com/MissouriMRDT/Autonomy_Packages/raw/main/abseil/arm64/abseil_${ABSEIL_VERSION}_arm64.deb && \
    dpkg -i abseil_${ABSEIL_VERSION}_arm64.deb && \
    rm abseil_${ABSEIL_VERSION}_arm64.deb

# Install GeographicLib
ARG GEOLIB_VERSION="2.3"
RUN wget -q https://github.com/MissouriMRDT/Autonomy_Packages/raw/main/geolib/arm64/geolib_${GEOLIB_VERSION}_arm64.deb && \
    dpkg -i geolib_${GEOLIB_VERSION}_arm64.deb && \
    rm geolib_${GEOLIB_VERSION}_arm64.deb

# Install Tensorflow.
ARG TENSORFLOW_VERSION="2.15.0"
RUN wget -q https://github.com/MissouriMRDT/Autonomy_Packages/raw/main/tensorflow/arm64/tensorflow_${TENSORFLOW_VERSION}_arm64.deb && \
    dpkg -i tensorflow_${TENSORFLOW_VERSION}_arm64.deb && \
    rm tensorflow_${TENSORFLOW_VERSION}_arm64.deb

# Install Quill
ARG QUILL_VERSION="3.8.0"
RUN wget -q https://github.com/MissouriMRDT/Autonomy_Packages/raw/main/quill/arm64/quill_${QUILL_VERSION}_arm64.deb && \
    dpkg -i quill_${QUILL_VERSION}_arm64.deb && \
    rm quill_${QUILL_VERSION}_arm64.deb

# Install Google Test
ARG GTEST_VERSION="1.14.0"
RUN wget -q https://github.com/MissouriMRDT/Autonomy_Packages/raw/main/gtest/arm64/gtest_${GTEST_VERSION}_arm64.deb && \
    dpkg -i gtest_${GTEST_VERSION}_arm64.deb && \
    rm gtest_${GTEST_VERSION}_arm64.deb

# Enable Make Threads
RUN echo 'export MAKEFLAGS=-j$(($(grep -c "^processor" /proc/cpuinfo) - 1))' >> .bashrc

# Clone Autonomy Software Repository
RUN git clone --recurse-submodules -j8 https://github.com/MissouriMRDT/Autonomy_Software.git /opt/Autonomy_Software

# Set Working Directory
WORKDIR /opt/Autonomy_Software/

# Set Labels
LABEL authors="Missouri S&T Mars Rover Design Team"
LABEL maintainer="Mars Rover Design Team <marsrover@mst.edu>"
LABEL org.opencontainers.image.source=https://github.com/missourimrdt/autonomy_software
LABEL org.opencontainers.image.licenses=GPL-3.0-only
LABEL org.opencontainers.image.version="v24.3.1"
LABEL org.opencontainers.image.description="Docker Image for ${L4T_BASE} ${L4T_MAJOR}.${L4T_MINOR}.${L4T_PATCH} with CUDA ${CUDA_MAJOR}.${CUDA_MINOR}, ZED SDK ${ZED_MAJOR}.${ZED_MINOR}, OpenCV ${OPENCV_VERSION}, Quill ${QUILL_VERSION} and Google Test ${GTEST_VERSION}."
